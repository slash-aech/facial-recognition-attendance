const { v4: uuidv4 } = require('uuid');
const timetablePool = require('../config/timetableDbPool');

const insertTimetableData = async (parsedData, meta) => {
    const client = await timetablePool.connect();
    const timetableId = uuidv4();

    try {
        await client.query('BEGIN');

        // 1. Insert into TIMETABLE
        await client.query(
            `INSERT INTO timetable (id, academic_calendar_id, department_id)
       VALUES ($1, $2, $3)`,
            [timetableId, meta.academicCalendarId, meta.departmentId]
        );

        const insertMany = async (data, query, getParams, validator = () => true) => {
            for (const item of data) {
                if (!validator(item)) {
                    throw new Error(`Validation failed for item: ${JSON.stringify(item)}`);
                }
                await client.query(query, getParams(item));
            }
        };

        // 2. Insert PERIODS
        await insertMany(
            parsedData.filter(p => p.type === 'period'),
            `INSERT INTO periods (id, name, short, period, start_time, end_time, timetable_id)
       VALUES ($1, $2, $3, $4, $5, $6, $7)`,
            p => [uuidv4(), p.name, p.short, p.period, p.starttime, p.endtime, timetableId]
        );

        // 3. Insert DAYDEFS
        await insertMany(
            parsedData.filter(p => p.type === 'daysdef'),
            `INSERT INTO daysdefs (id, name, short, days, timetable_id)
       VALUES ($1, $2, $3, $4, $5)`,
            d => [uuidv4(), d.name, d.short, parseInt(d.days), timetableId]
        );

        // 4. Insert WEEKSDEFS
        await insertMany(
            parsedData.filter(p => p.type === 'weeksdef'),
            `INSERT INTO weeksdefs (id, name, short, weeks, timetable_id)
       VALUES ($1, $2, $3, $4, $5)`,
            w => [uuidv4(), w.name, w.short, parseInt(w.weeks), timetableId]
        );

        // 5. Insert SUBJECT
        await insertMany(
            parsedData.filter(p => p.type === 'subject'),
            `INSERT INTO subject (id, name, short, timetable_id)
       VALUES ($1, $2, $3, $4)`,
            s => [uuidv4(), s.name, s.short, timetableId]
        );

        // 6. Insert CLASSROOM
        await insertMany(
            parsedData.filter(p => p.type === 'classroom'),
            `INSERT INTO classroom (classroom_id, name, short, timetable_id)
       VALUES ($1, $2, $3, $4)`,
            r => [r.id, r.name, r.short, timetableId]
        );

        // 7. Insert TEACHER INFO — must validate teacher_id is not null
        // 7. Insert TEACHER INFO — omit 'id' as it's auto-generated by DB
        // 7. Insert TEACHER INFO — omit 'id' as it's auto-generated by DB
        await insertMany(
            parsedData.filter(p => p.type === 'teacher'),
            `INSERT INTO teacher_enrollment_info (
        teacher_id, firstname, lastname, name, short, gender, color, email, mobile, timetable_id
    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)`,
            t => [
                t.id,                     // $1 - teacher_id (custom string like "C1E0C9E76F9066B4")
                t.firstname,              // $2
                t.lastname,               // $3
                t.name,                   // $4
                t.short,                  // $5
                t.gender,                 // $6
                t.color,                  // $7
                t.email,                  // $8
                t.mobile,                 // $9
                timetableId               // $10 - proper UUID
            ],
            t => !!t.id     // ✅ validation to ensure required fields exist
        );



        // 8. Insert CLASS
        await insertMany(
            parsedData.filter(p => p.type === 'class'),
            `INSERT INTO class (id, name, description, department_id, institute_id, timetable_id)
       VALUES ($1, $2, $3, $4, $5, $6)`,
            c => [uuidv4(), c.name, c.description, meta.departmentId, meta.instituteId, timetableId]
        );

        // 9. GROUPS
        await insertMany(
            parsedData.filter(p => p.type === 'group'),
            `INSERT INTO "group" (id, name, class_id, student_ids, entire_class, division_tag, timetable_id)
   VALUES ($1, $2, $3, $4, $5, $6, $7)`,
            g => [
                uuidv4(),
                g.name,
                g.classid, // ✅ fixed: was g.classId (wrong), now matches XML
                g.studentIds || [],
                g.entireClass || false,
                g.divisionTag || 0,
                timetableId
            ]
        );

        // 10. STUDENT ENROLLMENT
        await insertMany(
            parsedData.filter(p => p.type === 'student_enrollment'),
            `INSERT INTO student_enrollment_information (id, student_id, class_id, batch_id, semester_name, semester_id, timetable_id)
       VALUES ($1, $2, $3, $4, $5, $6, $7)`,
            s => [uuidv4(), s.studentId, s.classId, s.batchId || null, s.semesterName, meta.semesterId, timetableId],
            s => !!s.studentId
        );

        // 11. LESSON
        const lessons = parsedData.filter(p => p.type === 'lesson');

        // Optional: log all lessons missing subjectId
        lessons.forEach((l, idx) => {
            if (!l.subjectId) {
                console.warn(`⚠️ Lesson at index ${idx} is missing subjectId:`, l);
            }
        });

        // Proceed with insert
        await insertMany(
            lessons,
            `INSERT INTO lesson (
    id, timetable_id, class_ids, subject_id, 
    periods_per_card, period_per_week, lesson_type, 
    classroom_ids, group_ids, weeks_def_id, days_def_id
  ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)`,
            l => [
                uuidv4(),
                timetableId,
                l.classIds,
                l.subjectid,
                l.periodsPerCard,
                l.periodPerWeek,
                l.periodsPerCard === 1 ? 'Lecture' : 'Lab', // CASE MATCHED TO ENUM
                l.classroomIds,
                l.groupIds,
                l.weeksdefid,
                l.daysdefid
            ]
        );


        // 12. CARD
        await insertMany(
            parsedData.filter(p => p.type === 'card'),
            `INSERT INTO card (lesson_id, period, weeks, days, timetable_id, classroom_ids)
   VALUES ($1, $2, $3, $4, $5, $6)`,  // ← 7 placeholders
            c => [
                c.lessonid,
                c.period,
                c.weeks,
                c.days,
                timetableId,
                c.classroomids || []  // ← 7th value
            ]
        );


        // ✅ COMMIT all at once
        await client.query('COMMIT');
        console.log("done")
        return { success: true, timetableId };
    } catch (err) {
        await client.query('ROLLBACK');
        console.error('❌ Error inserting timetable data:', err);
        return { success: false, error: err.message };
    } finally {
        client.release();
    }
};

module.exports = { insertTimetableData };
